; Backscatter PIO
; Configured for two antennas

.program backscatter
.side_set 1 opt

; --- PIO settings ---
; configer autopull
; configered for 125 MHz clock

; --- backscatter settings ---
; 1 period = 8 cycles @ 125 MHz clock
; phase shift: 0, 90, 180, 270 degrees
; send frequency: 15625 KHz @ 8 instructions per symbol, 31250 KHz @ 4 instructions per symbol

; baud-rate 1000.00 kBaud (125.0 instructions per symbol to manage the actual data rate at 250 kbps)



; parameter 1:  b = clock-frequency/baud-rate: in our case fixed at 125 due to speed requirements
; parameter 2:  w = 6 (wasted cycles per symbol: OUT -> OUT -> JMP -> JMP -> MOV -> ... -> JMP )            // fixed wasted cycles per symbol
; parameter 3: d0 = clock-frequency/send frequency: We are starting with 8 with improvement possibility down to 4.


; interface: 
; comment: the parameters have to be obtained from the fifo, since the SET command only provides 5-bit
; 1. obtain from fifo: floor((b - w) / d0) - 1 // (number of full periods in symbol of frequency 0) :floor((125-6)/4) -1 = floor(29.75) - 1 = 29 - 1 = 28
; 
; OBS 29 is not fitting in 5-bits, so we have to use FIFO
; 3. then simply provide data

; --- parameters 8 cycles---
; 00 = 0 degrees    HHHH LLLL 
; 01 = 90 degrees   HH LLLL HH
; 10 = 270 degrees  LL HHHH LL
; 11 = 180 degrees  LLLL HHHH

; --- parameters 4 cycles---
; 00 = 0 degrees    HH LL
; 01 = 90 degrees   H LL H
; 10 = 270 degrees  L HH L
; 11 = 180 degrees  LL HH


; pin1 & pin2 -> pins && jmp -> side
; pin1 & pin2 -> side

SET  pins   1  side 1   ; swtich output off
OUT isr 32              ; get loop condition

get_symbol:
    OUT  x  1                           ; get data bit X_ + 1 wasted instruction to add to "w"
    OUT  y  1                           ; get data bit _Y + 1 wasted instruction to add to "w"
    JMP !x S0_                          ; jmp if x is zero + 1 wasted instruction to add to "w"
    JMP !y S10
    S11: ;send 11
        MOV x isr
        loop_11:
            SET pins 0  side 0  [1]     ; spend 2 cycle on low
            SET pins 1  side 1          ; spend 1 cycle on high
            JMP x-- loop_11             ; spend 1 cycle on jmp
        ; wait for 3 cycles before jump
        SET pins 0  side 0  [1]         ; spend 2 cycle on low
        SET pins 1  side 1              ; spend 1 cycle on high
        JMP get_symbol                  ; spend 1 cycle on jmp
    S10: ;send 10
        MOV x isr
        SET pins 0 side 0
        loop_10:
            SET pins 1  side 1  [1]     ; spend 2 cycle on high
            SET pins 0  side 0          ; spend 1 cycle on low
            JMP x-- loop_10             ; spend 1 cycle on jmp
        ; wait for 3-1 cycles before jump (one instruction shifted to before loop)
        SET pins 1  side 1  [1]         ; spend 2 cycle on high
        JMP get_symbol                  ; spend 1 cycle on jmp
    S0_:
        JMP !y S00
        ;send 01
        MOV x isr                       
        SET pins 1 side 1               ; spend 1 cycle on high
        loop:
            SET pins 0 side 0 [1]       ; spend 2*29 cycle on low
            SET pins 1 side 1           ; spend 1*29 cycle on high
            JMP x-- loop                ; spend 1*29 cycle on jmp
        ; wait for 3-1 cycles before jump   
        SET pins 0 side 0 [1]           ; spend 2 cycle on low
        JMP get_symbol
    S00: ;send 00
        MOV x isr
        loop_00:
            SET pins 1  side 1  [1]     ; spend 2 cycle on high  
            SET pins 0  side 0          ; spend 1 cycle on low
            JMP x-- loop_00             ; spend 1 cycle on jmp
        ; wait for 3 cycles before jump
        SET pins 1  side 1  [1]         ; spend 2 cycle on high
        SET pins 0  side 0              ; spend 1 cycle on low
        JMP get_symbol                  ; spend 1 cycle on jmp
    

% c-sdk {
#include "pico/stdlib.h"
#include "hardware/clocks.h"
#define min(x, y) (((x) < (y)) ? (x) : (y))
#define PIO_BAUDRATE 100000
#define PIO_CENTER_OFFSET 4836310
#define PIO_DEVIATION 372024
#define PIO_MIN_RX_BW 844048

static inline void backscatter_program_init(PIO pio, uint sm, uint offset, uint pin1, uint pin2){
   pio_gpio_init(pio, pin1);
   pio_sm_set_consecutive_pindirs(pio, sm, pin1, 1, true);
   pio_gpio_init(pio, pin2);
   pio_sm_set_consecutive_pindirs(pio, sm, pin2, 1, true);
   pio_sm_config c = backscatter_program_get_default_config(offset);
   sm_config_set_set_pins(&c, pin1, 1);
   sm_config_set_sideset_pins(&c, pin2); 
   sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX); // We only need TX, so get an 8-deep FIFO (join RX and TX FIFO)
   sm_config_set_out_shift(&c, false, true, 32);  // OUT shifts to left (MSB first), autopull after every 32 bit
   
   pio_sm_init(pio, sm, offset, &c);
   pio_sm_set_enabled(pio, sm, true);
   pio_sm_put_blocking(pio, sm, 28); // floor((b - w) / d0) - 1 = floor((125 - 6)/4) - 1   // -1 is requried since JMP 0-- is still true
}


static inline void backscatter_send(PIO pio, uint sm, uint32_t *message, uint32_t len) {
    for(uint32_t i = 0; i < len; i++){
        pio_sm_put_blocking(pio, sm, message[i]); // set pin back to low
    }
    sleep_ms(1); // wait for transmission to finish
}

%}