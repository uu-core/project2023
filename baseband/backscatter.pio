;
; Automatically generated using "generate-backscatter-pio.py"
; with the command: "python generate-backscatter-pio.py 34 32 100000 backscatter.pio --twoAntennas"
;
; Backscatter PIO
; Configured for two antenns
;

.program backscatter
.side_set 1 opt

; --- PIO settings ---
; configer autopull
; configered for 125 MHz clock

; --- backscatter settings ---
; frequency 0 shift: 3.676 MHz       (1 period = 34 cycles @ 125 MHz clock)
; frequency 1 shift: 3.906 Mhz       (1 period = 32 cycles @ 125 MHz clock)
; center frequency shift: 3.791 MHz
; deviation from center : 114.89 kHz
; baud-rate 100.00 kBaud (1250.0 instructions per symbol)
; occupied bandwith: 329.78 kHz


; parameter 1:  b = clock-frequency/baud-rate (e.g. 1250.0 for 100.00 kBaud @ 125 MHz clock)   // number of clock cycles per symbol
; parameter 2:  w = 4 (wasted cycles per symbol: OUT -> JMP -> MOV -> ... -> JMP )            // fixed wasted cycles per symbol
; parameter 3: d0 = clock-frequency/shift-frequency-0 (e.g. 34 for 3.676 MHz @ 125 MHz clock) // must be an _even_ number
; parameter 4: d1 = clock-frequency/shift-frequency-1 (e.g. 32 for 3.906 Mhz @ 125 MHz clock) // must be an _even_ number


; interface: 
; comment: the parameters have to be obtained from the fifo, since the SET command only provides 5-bit
; 1. obtain from fifo: floor((b - w) / d0) - 1 // (number of full periods in symbol of frequency 0)
; 2. obtain from fifo: floor((b - w) / d1) - 1 // (number of full periods in symbol of frequency 1)
; 3. then simply provide data

SET  pins   1  side 1  ; swtich output off
OUT   isr  32          ; baud config for frequency 0
OUT     y  32          ; baud config for frequency 1
get_symbol:
    OUT  x  1          ; get data bit
    JMP !x  send_0     ; jmp if x is zero
    send_1:
        MOV x  y                       ; load baud 1 config
        loop_1:
            SET pins 1  side 1  [7]    ; for 3906.2 kHz - 16 cycles high
            SET pins 1  side 1  [15]    ; for 3906.2 kHz - 16 cycles high
            SET pins 0  side 0  [7]    ; for 3906.2 kHz - 16 cycles low
            SET pins 0  side 0  [14]    ; for 3906.2 kHz - 16 cycles low
            JMP x-- loop_1             ; 1 cycle  
        ; to avoid a drift from imprecise baud-timing: stop the last period on time
        ; the remaining cycles are:  (b - w) % d1 = (1250 - 4) % 32 => 30 cycles left to spend 
        SET pins 1  side 1  [7]        ; spend 16 cycles of last period on high
        SET pins 1  side 1  [15]        ; spend 16 cycles of last period on high
        SET pins 0  side 0  [7]        ; spend 14 cycles of last period on low
        SET pins 0  side 0  [5]        ; spend 14 cycles of last period on low
        JMP get_symbol                 ; 
    send_0:
        MOV x isr                      ; load baud 0 config
        loop_0:
            SET pins 1  side 1  [7]    ; for 3676.5 kHz - 17 cycles high
            SET pins 1  side 1  [15]    ; for 3676.5 kHz - 17 cycles high
            SET pins 1  side 1  [0]    ; for 3676.5 kHz - 17 cycles high
            SET pins 0  side 0  [7]    ; for 3676.5 kHz - 17 cycles low
            SET pins 0  side 0  [15]    ; for 3676.5 kHz - 17 cycles low
            JMP x-- loop_0             ; 1 cycle  
        ; to avoid a drift from imprecise baud-timing: stop the last period on time
        ; the remaining cycles are:  (b - w) % d0 = (1250 - 4) % 34 => 22 cycles left to spend 
        SET pins 1  side 1  [7]        ; spend 17 cycles of last period on high
        SET pins 1  side 1  [15]        ; spend 17 cycles of last period on high
        SET pins 1  side 1  [0]        ; spend 17 cycles of last period on high
        SET pins 0  side 0  [4]        ; spend 5 cycles of last period on low
        JMP get_symbol                 ; 

% c-sdk {
#include "pico/stdlib.h"
#include "hardware/clocks.h"
#define min(x, y) (((x) < (y)) ? (x) : (y))
#define PIO_BAUDRATE 100000
#define PIO_CENTER_OFFSET 3791360
#define PIO_DEVIATION 114890
#define PIO_MIN_RX_BW 329779

static inline void backscatter_program_init(PIO pio, uint sm, uint offset, uint pin1,  uint pin2){
   pio_gpio_init(pio, pin1);
   pio_sm_set_consecutive_pindirs(pio, sm, pin1, 1, true);
   pio_gpio_init(pio, pin2);
   pio_sm_set_consecutive_pindirs(pio, sm, pin2, 1, true);
   pio_sm_config c = backscatter_program_get_default_config(offset);
   sm_config_set_set_pins(&c, pin1, 1);
   sm_config_set_sideset_pins(&c, pin2);
   sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX); // We only need TX, so get an 8-deep FIFO (join RX and TX FIFO)
   sm_config_set_out_shift(&c, false, true, 32);  // OUT shifts to left (MSB first), autopull after every 32 bit
   pio_sm_init(pio, sm, offset, &c);
   pio_sm_set_enabled(pio, sm, true);
   pio_sm_put_blocking(pio, sm, 35); // floor((b - w) / d0) - 1 = floor((1250 - 4)/34) - 1   // -1 is requried since JMP 0-- is still true
   pio_sm_put_blocking(pio, sm, 37); // floor((b - w) / d1) - 1 = floor((1250 - 4)/32) - 1   // -1 is required since JMP 0-- is still true
}


static inline void backscatter_send(PIO pio, uint sm, uint32_t *message, uint32_t len) {
    for(uint32_t i = 0; i < len; i++){
        pio_sm_put_blocking(pio, sm, message[i]); // set pin back to low
    }
    sleep_ms(1); // wait for transmission to finish
}

%}