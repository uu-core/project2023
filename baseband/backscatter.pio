;
; Automatically generated using "generate-backscatter-pio.py"
<<<<<<< Updated upstream
; with the command: "python generate-backscatter-pio.py 54 52 42003 backscatter.pio --twoAntennas"
=======
; with the command: "python generate-backscatter-pio.py 60 58 34597 backscatter.pio --twoAntennas"
>>>>>>> Stashed changes
;
; Backscatter PIO
; Configured for two antenns
;

.program backscatter
.side_set 1 opt

; --- PIO settings ---
; configer autopull
; configered for 125 MHz clock

; --- backscatter settings ---
<<<<<<< Updated upstream
; frequency 0 shift: 2.315 MHz       (1 period = 54 cycles @ 125 MHz clock)
; frequency 1 shift: 2.404 Mhz       (1 period = 52 cycles @ 125 MHz clock)
; center frequency shift: 2.359 MHz
; deviation from center : 44.52 kHz
; baud-rate 42.00 kBaud (2976.0 instructions per symbol)
; occupied bandwith: 131.03 kHz


; parameter 1:  b = clock-frequency/baud-rate (e.g. 2976.0 for 42.00 kBaud @ 125 MHz clock)   // number of clock cycles per symbol
; parameter 2:  w = 4 (wasted cycles per symbol: OUT -> JMP -> MOV -> ... -> JMP )            // fixed wasted cycles per symbol
; parameter 3: d0 = clock-frequency/shift-frequency-0 (e.g. 54 for 2.315 MHz @ 125 MHz clock) // must be an _even_ number
; parameter 4: d1 = clock-frequency/shift-frequency-1 (e.g. 52 for 2.404 Mhz @ 125 MHz clock) // must be an _even_ number
=======
; frequency 0 shift: 2.083 MHz       (1 period = 60 cycles @ 125 MHz clock)
; frequency 1 shift: 2.155 Mhz       (1 period = 58 cycles @ 125 MHz clock)
; center frequency shift: 2.119 MHz
; deviation from center : 35.92 kHz
; baud-rate 34.60 kBaud (3613.0 instructions per symbol)
; occupied bandwith: 106.44 kHz


; parameter 1:  b = clock-frequency/baud-rate (e.g. 3613.0 for 34.60 kBaud @ 125 MHz clock)   // number of clock cycles per symbol
; parameter 2:  w = 4 (wasted cycles per symbol: OUT -> JMP -> MOV -> ... -> JMP )            // fixed wasted cycles per symbol
; parameter 3: d0 = clock-frequency/shift-frequency-0 (e.g. 60 for 2.083 MHz @ 125 MHz clock) // must be an _even_ number
; parameter 4: d1 = clock-frequency/shift-frequency-1 (e.g. 58 for 2.155 Mhz @ 125 MHz clock) // must be an _even_ number
>>>>>>> Stashed changes


; interface: 
; comment: the parameters have to be obtained from the fifo, since the SET command only provides 5-bit
; 1. obtain from fifo: floor((b - w) / d0) - 1 // (number of full periods in symbol of frequency 0)
; 2. obtain from fifo: floor((b - w) / d1) - 1 // (number of full periods in symbol of frequency 1)
; 3. then simply provide data

SET  pins   1  side 1  ; swtich output off
OUT   isr  32          ; baud config for frequency 0
OUT     y  32          ; baud config for frequency 1
get_symbol:
    OUT  x  1          ; get data bit
    JMP !x  send_0     ; jmp if x is zero
    send_1:
        MOV x  y                       ; load baud 1 config
        loop_1:
<<<<<<< Updated upstream
            SET pins 1  side 1  [7]    ; for 2403.8 kHz - 26 cycles high
            SET pins 1  side 1  [7]    ; for 2403.8 kHz - 26 cycles high
            SET pins 1  side 1  [7]    ; for 2403.8 kHz - 26 cycles high
            SET pins 1  side 1  [1]    ; for 2403.8 kHz - 26 cycles high
            SET pins 0  side 0  [7]    ; for 2403.8 kHz - 26 cycles low
            SET pins 0  side 0  [7]    ; for 2403.8 kHz - 26 cycles low
            SET pins 0  side 0  [7]    ; for 2403.8 kHz - 26 cycles low
            SET pins 0  side 0  [0]    ; for 2403.8 kHz - 26 cycles low
            JMP x-- loop_1             ; 1 cycle  
        ; to avoid a drift from imprecise baud-timing: stop the last period on time
        ; the remaining cycles are:  (b - w) % d1 = (2975 - 4) % 52 => 7 cycles left to spend 
        SET pins 1  side 1  [6]        ; spend 7 cycles of last period on high
=======
            SET pins 1  side 1  [7]    ; for 2155.2 kHz - 29 cycles high
            SET pins 1  side 1  [7]    ; for 2155.2 kHz - 29 cycles high
            SET pins 1  side 1  [7]    ; for 2155.2 kHz - 29 cycles high
            SET pins 1  side 1  [4]    ; for 2155.2 kHz - 29 cycles high
            SET pins 0  side 0  [7]    ; for 2155.2 kHz - 29 cycles low
            SET pins 0  side 0  [7]    ; for 2155.2 kHz - 29 cycles low
            SET pins 0  side 0  [7]    ; for 2155.2 kHz - 29 cycles low
            SET pins 0  side 0  [3]    ; for 2155.2 kHz - 29 cycles low
            JMP x-- loop_1             ; 1 cycle  
        ; to avoid a drift from imprecise baud-timing: stop the last period on time
        ; the remaining cycles are:  (b - w) % d1 = (3613 - 4) % 58 => 13 cycles left to spend 
        SET pins 1  side 1  [7]        ; spend 13 cycles of last period on high
        SET pins 1  side 1  [4]        ; spend 13 cycles of last period on high
>>>>>>> Stashed changes
        JMP get_symbol                 ; 
    send_0:
        MOV x isr                      ; load baud 0 config
        loop_0:
<<<<<<< Updated upstream
            SET pins 1  side 1  [7]    ; for 2314.8 kHz - 27 cycles high
            SET pins 1  side 1  [7]    ; for 2314.8 kHz - 27 cycles high
            SET pins 1  side 1  [7]    ; for 2314.8 kHz - 27 cycles high
            SET pins 1  side 1  [2]    ; for 2314.8 kHz - 27 cycles high
            SET pins 0  side 0  [7]    ; for 2314.8 kHz - 27 cycles low
            SET pins 0  side 0  [7]    ; for 2314.8 kHz - 27 cycles low
            SET pins 0  side 0  [7]    ; for 2314.8 kHz - 27 cycles low
            SET pins 0  side 0  [1]    ; for 2314.8 kHz - 27 cycles low
            JMP x-- loop_0             ; 1 cycle  
        ; to avoid a drift from imprecise baud-timing: stop the last period on time
        ; the remaining cycles are:  (b - w) % d0 = (2975 - 4) % 54 => 1 cycles left to spend 
        SET pins 1  side 1  [0]        ; spend 1 cycles of last period on high
=======
            SET pins 1  side 1  [7]    ; for 2083.3 kHz - 30 cycles high
            SET pins 1  side 1  [7]    ; for 2083.3 kHz - 30 cycles high
            SET pins 1  side 1  [7]    ; for 2083.3 kHz - 30 cycles high
            SET pins 1  side 1  [5]    ; for 2083.3 kHz - 30 cycles high
            SET pins 0  side 0  [7]    ; for 2083.3 kHz - 30 cycles low
            SET pins 0  side 0  [7]    ; for 2083.3 kHz - 30 cycles low
            SET pins 0  side 0  [7]    ; for 2083.3 kHz - 30 cycles low
            SET pins 0  side 0  [4]    ; for 2083.3 kHz - 30 cycles low
            JMP x-- loop_0             ; 1 cycle  
        ; to avoid a drift from imprecise baud-timing: stop the last period on time
        ; the remaining cycles are:  (b - w) % d0 = (3613 - 4) % 60 => 9 cycles left to spend 
        SET pins 1  side 1  [7]        ; spend 9 cycles of last period on high
        SET pins 1  side 1  [0]        ; spend 9 cycles of last period on high
>>>>>>> Stashed changes
        JMP get_symbol                 ; 

% c-sdk {
#include "pico/stdlib.h"
#include "hardware/clocks.h"
#define min(x, y) (((x) < (y)) ? (x) : (y))
<<<<<<< Updated upstream
#define PIO_BAUDRATE 42003
#define PIO_CENTER_OFFSET 2359330
#define PIO_DEVIATION 44516
#define PIO_MIN_RX_BW 131034
=======
#define PIO_BAUDRATE 34597
#define PIO_CENTER_OFFSET 2119253
#define PIO_DEVIATION 35920
#define PIO_MIN_RX_BW 106436
>>>>>>> Stashed changes

static inline void backscatter_program_init(PIO pio, uint sm, uint offset, uint pin1,  uint pin2){
   pio_gpio_init(pio, pin1);
   pio_sm_set_consecutive_pindirs(pio, sm, pin1, 1, true);
   pio_gpio_init(pio, pin2);
   pio_sm_set_consecutive_pindirs(pio, sm, pin2, 1, true);
   pio_sm_config c = backscatter_program_get_default_config(offset);
   sm_config_set_set_pins(&c, pin1, 1);
   sm_config_set_sideset_pins(&c, pin2);
   sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX); // We only need TX, so get an 8-deep FIFO (join RX and TX FIFO)
   sm_config_set_out_shift(&c, false, true, 32);  // OUT shifts to left (MSB first), autopull after every 32 bit
   pio_sm_init(pio, sm, offset, &c);
   pio_sm_set_enabled(pio, sm, true);
<<<<<<< Updated upstream
   pio_sm_put_blocking(pio, sm, 54); // floor((b - w) / d0) - 1 = floor((2975 - 4)/54) - 1   // -1 is requried since JMP 0-- is still true
   pio_sm_put_blocking(pio, sm, 56); // floor((b - w) / d1) - 1 = floor((2975 - 4)/52) - 1   // -1 is required since JMP 0-- is still true
=======
   pio_sm_put_blocking(pio, sm, 59); // floor((b - w) / d0) - 1 = floor((3613 - 4)/60) - 1   // -1 is requried since JMP 0-- is still true
   pio_sm_put_blocking(pio, sm, 61); // floor((b - w) / d1) - 1 = floor((3613 - 4)/58) - 1   // -1 is required since JMP 0-- is still true
>>>>>>> Stashed changes
}


static inline void backscatter_send(PIO pio, uint sm, uint32_t *message, uint32_t len) {
    for(uint32_t i = 0; i < len; i++){
        pio_sm_put_blocking(pio, sm, message[i]); // set pin back to low
    }
    sleep_ms(1); // wait for transmission to finish
}

%}