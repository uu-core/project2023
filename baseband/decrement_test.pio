;
; Automatically generated using "generate-backscatter-pio.py"
; with the command: "python generate-backscatter-pio.py 28 24 100000 backscatter.pio --twoAntennas"
;
; Backscatter PIO
; Configured for two antenns
;

.program backscatter
.side_set 1 opt

 

;---- [testing if jmp is true on 0--] ----
SET x 4
SET pins 0 side 0 [7]

; if jmp 0-- is evaluated to true, this loop should produce 5 pulses, otherwise 4
test_loop:
    SET pins 1 side 1 [7]
    SET pins 1 side 1 [7]
    SET pins 0 side 0 [7]
    SET pins 0 side 0 [7]
    JMP x-- Loop_0

SET pins 1 side 1 [7]


% c-sdk {
#include "pico/stdlib.h"
#include "hardware/clocks.h"
#define min(x, y) (((x) < (y)) ? (x) : (y))
#define PIO_BAUDRATE 100000
#define PIO_CENTER_OFFSET 4836310
#define PIO_DEVIATION 372024
#define PIO_MIN_RX_BW 844048

static inline void backscatter_program_init(PIO pio, uint sm, uint offset, uint pin1, uint pin2){
   pio_gpio_init(pio, pin1);
   pio_sm_set_consecutive_pindirs(pio, sm, pin1, 1, true);
   pio_gpio_init(pio, pin2);
   pio_sm_set_consecutive_pindirs(pio, sm, pin2, 1, true);
   pio_sm_config c = backscatter_program_get_default_config(offset);
   sm_config_set_set_pins(&c, pin1, 1);
   sm_config_set_sideset_pins(&c, pin2); 
   sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX); // We only need TX, so get an 8-deep FIFO (join RX and TX FIFO)
   sm_config_set_out_shift(&c, false, true, 32);  // OUT shifts to left (MSB first), autopull after every 32 bit
   
   pio_sm_init(pio, sm, offset, &c);
   pio_sm_set_enabled(pio, sm, true);
   pio_sm_put_blocking(pio, sm, 28); // floor((b - w) / d0) - 1 = floor((125 - 6)/4) - 1   // -1 is requried since JMP 0-- is still true
}


static inline void backscatter_send(PIO pio, uint sm, uint32_t *message, uint32_t len) {
    for(uint32_t i = 0; i < len; i++){
        pio_sm_put_blocking(pio, sm, message[i]); // set pin back to low
    }
    sleep_ms(1); // wait for transmission to finish
}

%}